/*
 * Library service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vitalii.fedyk.libraryuserservice.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.vitalii.fedyk.libraryuserservice.dto.BookGenreDto;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateBookDto
 */
@JsonPropertyOrder({
  CreateBookDto.JSON_PROPERTY_TITLE,
  CreateBookDto.JSON_PROPERTY_DESCRIPTION,
  CreateBookDto.JSON_PROPERTY_GENRE,
  CreateBookDto.JSON_PROPERTY_PAGES_COUNT,
  CreateBookDto.JSON_PROPERTY_AUTHOR_ID
})
@JsonTypeName("CreateBook")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-01T19:38:52.451589+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class CreateBookDto implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TITLE = "title";
  @jakarta.annotation.Nonnull
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_GENRE = "genre";
  @jakarta.annotation.Nonnull
  private BookGenreDto genre;

  public static final String JSON_PROPERTY_PAGES_COUNT = "pagesCount";
  @jakarta.annotation.Nonnull
  private Integer pagesCount;

  public static final String JSON_PROPERTY_AUTHOR_ID = "authorId";
  @jakarta.annotation.Nonnull
  private Long authorId;

  public CreateBookDto() {
  }

  public CreateBookDto title(@jakarta.annotation.Nonnull String title) {
    
    this.title = title;
    return this;
  }

  /**
   * The title of the book.
   * @return title
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(@jakarta.annotation.Nonnull String title) {
    this.title = title;
  }

  public CreateBookDto description(@jakarta.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * A brief description of the book.
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }

  public CreateBookDto genre(@jakarta.annotation.Nonnull BookGenreDto genre) {
    
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GENRE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BookGenreDto getGenre() {
    return genre;
  }


  @JsonProperty(JSON_PROPERTY_GENRE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGenre(@jakarta.annotation.Nonnull BookGenreDto genre) {
    this.genre = genre;
  }

  public CreateBookDto pagesCount(@jakarta.annotation.Nonnull Integer pagesCount) {
    
    this.pagesCount = pagesCount;
    return this;
  }

  /**
   * Number of pages in the book.
   * @return pagesCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAGES_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPagesCount() {
    return pagesCount;
  }


  @JsonProperty(JSON_PROPERTY_PAGES_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPagesCount(@jakarta.annotation.Nonnull Integer pagesCount) {
    this.pagesCount = pagesCount;
  }

  public CreateBookDto authorId(@jakarta.annotation.Nonnull Long authorId) {
    
    this.authorId = authorId;
    return this;
  }

  /**
   * Get authorId
   * minimum: 1
   * @return authorId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAuthorId() {
    return authorId;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthorId(@jakarta.annotation.Nonnull Long authorId) {
    this.authorId = authorId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBookDto createBook = (CreateBookDto) o;
    return Objects.equals(this.title, createBook.title) &&
        Objects.equals(this.description, createBook.description) &&
        Objects.equals(this.genre, createBook.genre) &&
        Objects.equals(this.pagesCount, createBook.pagesCount) &&
        Objects.equals(this.authorId, createBook.authorId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, genre, pagesCount, authorId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBookDto {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

