/*
 * Library service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vitalii.fedyk.libraryuserservice.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vitalii.fedyk.libraryuserservice.dto.PaginationDto;
import org.vitalii.fedyk.libraryuserservice.dto.ReadUserDto;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ReadUsersDto
 */
@JsonPropertyOrder({
  ReadUsersDto.JSON_PROPERTY_USERS,
  ReadUsersDto.JSON_PROPERTY_PAGINATION
})
@JsonTypeName("ReadUsers")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-01T19:38:52.451589+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class ReadUsersDto implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_USERS = "users";
  @jakarta.annotation.Nullable
  private List<ReadUserDto> users = new ArrayList<>();

  public static final String JSON_PROPERTY_PAGINATION = "pagination";
  @jakarta.annotation.Nullable
  private PaginationDto pagination;

  public ReadUsersDto() {
  }

  public ReadUsersDto users(@jakarta.annotation.Nullable List<ReadUserDto> users) {
    
    this.users = users;
    return this;
  }

  public ReadUsersDto addUsersItem(ReadUserDto usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReadUserDto> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(@jakarta.annotation.Nullable List<ReadUserDto> users) {
    this.users = users;
  }

  public ReadUsersDto pagination(@jakarta.annotation.Nullable PaginationDto pagination) {
    
    this.pagination = pagination;
    return this;
  }

  /**
   * Get pagination
   * @return pagination
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaginationDto getPagination() {
    return pagination;
  }


  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPagination(@jakarta.annotation.Nullable PaginationDto pagination) {
    this.pagination = pagination;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadUsersDto readUsers = (ReadUsersDto) o;
    return Objects.equals(this.users, readUsers.users) &&
        Objects.equals(this.pagination, readUsers.pagination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(users, pagination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadUsersDto {\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

